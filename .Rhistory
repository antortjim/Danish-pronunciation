sd(normal.data)
a <- 5
b <- 3
scale.location <- normal.data * a + b
mean(scale.location)
normal.data <- curve(dnorm(x, mean = 0, sd = 10), from = -1000, to = +1000, type = "b", add = TRUE, col = "blue")$y
mean(normal.data)
sd(normal.data)
a <- 5
normal.data <- curve(dnorm(x, mean = 0, sd = 10), from = -100, to = +100, type = "b", add = TRUE, col = "blue")$y
mean(normal.data)
sd(normal.data)
a <- 5
b <- 3
normal.data
normal.data <- curve(dnorm(x, mean = 0, sd = 10), from = -100, to = +100, type = "b", add = TRUE, col = "blue")$y
mean(normal.data)
sd(normal.data)
a <- 5
b <- 3
curve(dnorm(x, mean = 0, sd = 10), from = -100, to = +100, type = "b", add = TRUE, col = "blue")$y
normal.data <- curve(dnorm(x, mean = 0, sd = 10), from = -100, to = +100, type = "b", add = TRUE, col = "blue")$y
mean(normal.data)
sd(normal.data)
a <- 5
b <- 3
scale.location <- normal.data * a + b
mean(scale.location)
sd(scale.location)
curve(dnorm(x, mean = 0, sd = 10), from = -100, to = +100, type = "b", add = TRUE, col = "blue")$y
normal.data <- curve(dnorm(x, mean = 0, sd = 10), from = -100, to = +100, type = "b", add = TRUE, col = "blue")$y
mean(normal.data)
sd(normal.data)
?dnrom
?dnorm
normal.data <- curve(dnorm(x, mean = 0, sd = 1), from = -100, to = +100, type = "b", add = TRUE, col = "blue")$y
mean(normal.data)
sd(normal.data)
a <- 5
b <- 3
normal.data <- curve(dnorm(x, mean = 0, sd = 1), from = -100, to = +100, type = "b", add = TRUE, col = "blue")$y
mean(normal.data)
sd(normal.data)
a <- 5
normal.data <- curve(dnorm(x, mean = 0, sd = 10), from = -100, to = +100, type = "b", add = TRUE, col = "blue")$y
mean(normal.data)
sd(normal.data)
a <- 5
b <- 3
scale.location <- normal.data * a + b
normal.data <- curve(dnorm(x, mean = 0, sd = 10), from = -100, to = +100, type = "b", add = TRUE)$y
mean(normal.data)
sd(normal.data)
a <- 5
b <- 3
scale.location <- normal.data * a + b
mean(scale.location)
sd(scale.location)
sd(normal.data)
normal.data
normal.data <- curve(dnorm(x, mean = 0, sd = 10), from = -50, to = +50, type = "b", add = TRUE)$y
mean(normal.data)
sd(normal.data)
a <- 5
b <- 3
scale.location <- normal.data * a + b
mean(scale.location)
sd(scale.location)
normal.data <- curve(dnorm(x, mean = 0, sd = 10), from = -50, to = +50, type = "b", add = TRUE)$y
curve(dnorm(x, mean = 0, sd = 10), from = -50, to = +50, type = "b", add = TRUE)$y
normal.data <- plot(dnorm(x, mean = 0, sd = 10), from = -50, to = +50, type = "b", add = TRUE)$y
normal.data <- curve(dnorm(x, mean = 0, sd = 10), from = -50, to = +50, type = "b", add = TRUE)$y
normal.data <- curve(dnorm(x, mean = 0, sd = 10), from = -50, to = +50, type = "b", add = TRUE)$y
mean(normal.data)
sd(normal.data)
normal.data
normal.data * length(normal.data)
normal.data * -50:50
normal.data
sd(normal.data * -50:50)
normal.data
normal.data <- curve(dnorm(x, mean = 0, sd = 10), from = -10, to = +10, type = "b", add = TRUE)$y
mean(normal.data)
normal.data <- curve(dnorm(x, mean = 0, sd = 10), from = -10, to = +10, type = "b", add = TRUE)$y
mean(normal.data)
sd(normal.data * -10:10)
normal.data <- curve(dnorm(x, mean = 0, sd = 10), from = -30, to = +30, type = "b", add = TRUE)$y
mean(normal.data)
sd(normal.data * -10:10)
rnorm(30)
rnorm(30, mean = 0)
rnorm(30, mean = 0, sd = 1)
normal.data <- rnorm(30, mean = 0, sd = 1)
mean(normal.data)
normal.data <- rnorm(100, mean = 0, sd = 1)
mean(normal.data)
sd(normal.data)
normal.data <- rnorm(1000, mean = 0, sd = 1)
mean(normal.data)
sd(normal.data)
a <- 5
b <- 3
scale.location <- normal.data * a + b
scale.location
mean(scale.location)
sd(scale.location)
sd(normal.data)
var(scale.location)
var(normal.data)
var(scale.location)
25 * var(normal.data)
var(scale.location)
25 * var(normal.data)
hist(rnorm(100))
pdf(file = "~/sample.pdf")
hist(rnorm(100))
dev.off()
gamma(2, 4)
Gamma(2, 4)
Gamma(2)
?Gamma
?dgamma
dgamma(2, 4)
curve(dgamma(2, 4), from = 0, to = 5, type = "b", add = TRUE, col = "blue")
curve(dgamma(shape = 2, rate = 4), from = 0, to = 5, type = "b", add = TRUE, col = "blue")
curve(dgamma(x, shape = 2, rate = 4), from = 0, to = 5, type = "b", add = TRUE, col = "blue")
library("ggplot")
library("ggplot2")
library("ggfortify")
ggdistribution(dgamma, seq(0, 5, 0.1), shape = 2, rate = 4, fill = "blue", )
ggdistribution(dgamma, seq(0, 5, 0.1), shape = 2, rate = 4, fill = "red")
ggdistribution(dgamma, seq(0, 5, 0.1), shape = 2, rate = 4, fill = "burgundy")
ggdistribution(dgamma, seq(0, 5, 0.1), shape = 2, rate = 4, fill = "red")
ggdistribution(dgamma, seq(0, 5, 0.1), shape = 2, rate = 4, fill = "#800020")
ggdistribution(dgamma, seq(0, 5, 0.1), shape = 2, rate = 4, fill = "#800020", alpha = 0)
ggdistribution(dgamma, seq(0, 5, 0.1), shape = 2, rate = 4, fill = "#800020", alpha = 1)
ggdistribution(dgamma, seq(0, 5, 0.1), shape = 2, rate = 4, fill = "#800020", alpha = 0.5)
ggdistribution(dgamma, seq(0, 5, 0.1), shape = 2, rate = 4, fill = "#800020", alpha = 1)
ggdistribution(dgamma, seq(-10, 5, 0.1), shape = 2, rate = 4, fill = "#800020", alpha = 1)
ggdistribution(dgamma, seq(0, 5, 0.1), shape = 2, rate = 4, fill = "#800020", alpha = 1)
ggdistribution(dgamma, seq(0,  100, 0.1), shape = 2, rate = 4, fill = "#800020", alpha = 1)
ggdistribution(dgamma, seq(0, 2, 0.1), shape = 2, rate = 4, fill = "#800020", alpha = 1)
ggdistribution(dgamma, seq(0, 3, 0.1), shape = 2, rate = 4, fill = "#800020", alpha = 1)
curve(dgamma(x, shape = 2, rate = 4), from = 0, to = 5, type = "b", add = TRUE, col = "blue")
exp.data <- curve(dexp(x, 1.15), from = 0, to = 5, type = "b", add = TRUE, col = "blue")
curve(dgamma(x, shape = 2, rate = 4), from = 0, to = 5, type = "b", add = TRUE, col = "blue")
curve(dgamma(x, shape = 2, rate = 4), from = 0, to = 5, type = "b", add = TRUE, col = "blue")
curve(dgamma(x, shape = 2, rate = 4), from = 0, to = 5, type = "b", add = TRUE, col = "blue")
ggdistribution(dgamma, seq(0, 3, 0.1), shape = 2, rate = 4, fill = "#800020", alpha = 1)
ggdistribution(dgamma, seq(0, 3, 0.1), shape = 2, rate = 4, fill = "#800020", alpha = 1)
curve(dgamma(x, shape = 2, rate = 4), from = 0, to = 5, type = "b", add = TRUE, col = "blue")
curve(dgamma(x, shape = 2, rate = 4), from = 0, to = 5, type = "b", add = TRUE, col = "blue")
curve(dgamma(x, shape = 2, rate = 4), from = 0, to = 5, type = "b", add = TRUE, col = "blue", ylab = "Probability")
ggdistribution(dgamma, seq(0, 3, 0.1), shape = 2, rate = 4, fill = "#800020", alpha = 1)
curve(dgamma(x, shape = 2, rate = 4), from = 0, to = 5, type = "b", add = TRUE, col = "blue", ylab = "Probability")
curve(dgamma(x, shape = 2, rate = 4), from = 0, to = 5, type = "b", add = TRUE, col = "blue", ylab = "Density", main = "Gamma distribution shape = 2 rate = 4")
curve(dgamma(x, shape = 2, rate = 4), from = 0, to = 5, type = "b", add = TRUE, col = "blue", ylab = "Density", title = "Gamma distribution shape = 2 rate = 4")
curve(dgamma(x, shape = 2, rate = 4), from = 0, to = 5, type = "b", add = TRUE, col = "blue", ylab = "Density", main = "Gamma distribution shape = 2 rate = 4")
ggdistribution(dgamma, seq(0, 3, 0.1), shape = 2, rate = 4, fill = "#800020", alpha = 1)
curve(dgamma(x, shape = 2, rate = 4), from = 0, to = 5, type = "b", add = TRUE, col = "blue", ylab = "Density", main = "Gamma distribution shape = 2 rate = 4")
normal.distribution <- function(mu, sigma, x)
{
result <- ( 1 / sqrt(2 * sigma^2 * pi) ) * exp( -( (x - mu)^2/2*sigma^2 ) )
return(result)
}
mean.compute <- function(mu, sigma, x)
{
result <- normal.distribution(mu, sigma, x) * x
return(result)
}
variance.compute <- function(mu, sigma, x)
{
result <- normal.distribution(mu, sigma, x) * (x - mean.compute(mu, sigma, x))^2
return(result)
}
integrate(mean.compute,     lower = -Inf, upper = +Inf, mu = 0, sigma = 1)
integrate(mean.compute,     lower = -Inf, upper = +Inf, mu = 5, sigma = 1)
integrate(mean.compute,     lower = -Inf, upper = +Inf, mu = 10, sigma = 1)
sqrt(integrate(variance.compute, lower = -Inf, upper = +Inf, mu = 0, sigma = 1)$value)
sqrt(integrate(variance.compute, lower = -Inf, upper = +Inf, mu = 0, sigma = 10)$value)
integrate(dgamma, lower = 0, upper = +Inf, shape = 2, rate = 4)
gamma.mean.compue <- function(shape, rate, x)
{
dgamma(shape = shape, rate = rate) * x
}
integrate(gamma.mean.compute, lower = 0, upper = +Inf, shape = 2, rate = 4)
gamma.mean.compute <- function(shape, rate, x)
{
dgamma(shape = shape, rate = rate) * x
}
integrate(gamma.mean.compute, lower = 0, upper = +Inf, shape = 2, rate = 4)
integrate(gamma.mean.compute(x), lower = 0, upper = +Inf, shape = 2, rate = 4)
integrate(gamma.mean.compute, lower = 0, upper = +Inf, shape = 2, rate = 4)
dgamma(2, 4)
curve(dgamma(x, shape = 2, rate = 4), from = 0, to = 5, type = "b", add = TRUE, col = "blue", ylab = "Density", main = "Gamma distribution shape = 2 rate = 4")
gamma.mean.compute <- function(shape, rate, x)
{
dgamma(x, shape = shape, rate = rate) * x
}
integrate(gamma.mean.compute, lower = 0, upper = +Inf, shape = 2, rate = 4)
gamma.mean.compute <- function(shape, rate, x)
{
dgamma(x, shape = shape, rate = rate) * x
}
integrate(gamma.mean.compute, lower = 0, upper = +Inf, shape = 2, rate = 4)
integrate(dgamma, lower = 0, upper = +Inf, shape = 2, rate = 4)
gamma.mean.compute <- function(shape, rate, x)
{
dgamma(x, shape = shape, rate = rate)
}
integrate(dgamma, lower = 0, upper = +Inf, shape = 2, rate = 4)
integrate(gamma.mean.compute, lower = 0, upper = +Inf, shape = 2, rate = 4)
gamma.mean.compute <- function(shape, rate, x)
{
dgamma(x, shape = shape, rate = rate) * x
}
integrate(gamma.mean.compute, lower = 0, upper = +Inf, shape = 2, rate = 4)
gamma.mean.integrand <- function(shape, rate, x)
{
dgamma(x, shape = shape, rate = rate) * x
}
gamma.mean.compute <- function(shape, rate, x)
{
integrate(gamma.mean.integrand, lower = 0, upper = +Inf, shape = shape, rate = rate)
}
gamma.mean.compute <- function(shape, rate)
{
integrate(gamma.mean.integrand(x), lower = 0, upper = +Inf, shape = shape, rate = rate)
}
gamma.mean.compute(2, 4)
{
integrate(gamma.mean.integrand, lower = 0, upper = +Inf, shape = shape, rate = rate)
gamma.mean.compute <- function(shape, rate)
{
integrate(gamma.mean.integrand, lower = 0, upper = +Inf, shape = shape, rate = rate)
}
gamma.mean.compute(2, 4)
gamma.mean.compute(2, 4)
gamma.var.integrand <- function(shape, rate, x)
{
dgamma(x, shape = shape, rate = rate) * (x − gamma.mean.compute(shape = shape, rate = rate))^2
}
gamma.var.integrand <- function(shape, rate, x)
{
dgamma(x, shape = shape, rate = rate) * (x − gamma.mean.compute(shape = shape, rate = rate))^2
}
gamma.var.integrand <- function(shape, rate, x)
{
dgamma(x, shape = shape, rate = rate) * (x − gamma.mean.compute(shape = shape, rate = rate))^2
}
gamma.var.integrand <- function(shape, rate, x)
{
dgamma(x, shape = shape, rate = rate) * (x − gamma.mean.compute(shape = shape, rate = rate))^2
dgamma(x, shape = 2, rate  =4)
x
x <- NA
x
rm(x)
dgamma(x, shape = 2, rate  =4)
integrate(gamma.mean.integrand, lower = 0, upper = +Inf, shape = shape, rate = rate)
shape = 2
rate  = 4
integrate(gamma.mean.integrand, lower = 0, upper = +Inf, shape = shape, rate = rate)
var(dgamma(2, 4))
curve(dgamma(x, shape = 2, rate = 4), from = 0, to = 5, type = "b", add = TRUE, col = "blue", ylab = "Density", main = "Gamma distribution shape = 2 rate = 4")
```
curve(dgamma(x, shape = 2, rate = 4), from = 0, to = 5, type = "b", add = TRUE, col = "blue", ylab = "Density", main = "Gamma distribution shape = 2 rate = 4")
curve(dgamma(x, shape = 2, rate = 4), from = 0, to = 5, type = "b", add = TRUE, col = "blue", ylab = "Density", main = "Gamma distribution shape = 2 rate = 4")
curve(dgamma(x, shape = 2, rate = 4), from = 0, to = 5, type = "b", add = TRUE, col = "blue", ylab = "Density", main = "Gamma distribution shape = 2 rate = 4")$y
```
integrate(function(x) {dgamma(shape = 2, rate = 4) * (x - 0.5)^2},
lower = 0, upper = +Inf)
integrate(function(x) {dgamma(x, shape = 2, rate = 4) * (x - 0.5)^2},
lower = 0, upper = +Inf)
integrate(function(x) {dgamma(x, shape = 2, rate = 4) * (x - 0.5) ^ 2},
lower = 0, upper = +Inf)
integrate(function(x) {dgamma(x, shape = 2, rate = 4) * x},
lower = 0, upper = +Inf)
integrate(function(x) {dgamma(x, shape = 2, rate = 4) * x},
lower = 0, upper = +Inf)
integrate(function(x) {dgamma(x, shape = 2, rate = 4) * (x - 0.5) ^ 2},
lower = 0, upper = +Inf)
rnorm(1000)
sort(rnorm(10000))
sort(rnorm(10000, mean = 0, sd = 1))
plot(sort(rnorm(10000, mean = 0, sd = 1)))
hist(sort(rnorm(10000, mean = 0, sd = 1)))
sort(rnorm(10000, mean = 0, sd = 1))
quantile(sort(rnorm(10000, mean = 0, sd = 1)), x = 10)
?quantile
?qnorm
qnorm(mean = 0, sd = 1)
qnorm(p = 1, mean = 0, sd = 1)
qnorm(p = 0.5, mean = 0, sd = 1)
qnorm(p = 0.05, mean = 0, sd = 1)
pnorm(0.05, mean = 0, sd = 1)
pnorm(0, mean = 0, sd = 1)
pnorm(2 , mean = 0, sd = 1)
pnorm(-2 , mean = 0, sd = 1)
pnorm(-2 , mean = 0, sd = 1) / 0.05
pnorm(-2 , mean = 0, sd = 1) - 0.05
(pnorm(-2 , mean = 0, sd = 1) - 0.05 ) / 0.05
pnorm(-2 , mean = 0, sd = 1)
qnorm(p = 0.05, mean = 0, sd = 1)
pnorm(2 , mean = 0, sd = 1)
pnorm(-2 , mean = 0, sd = 1)
qnorm(0.01, mean = 0, sd = 1)
lapply(list(0.01, 0.005, 0.001), qnorm(x, mean = 0, sd = 1))
lapply(list(0.01, 0.005, 0.001), function(x) qnorm(x, mean = 0, sd = 1))
lapply(list(0.01, 0.005, 0.001), function(x) qnorm(x, mean = 0, sd = 1))
unlist(lapply(list(0.01, 0.005, 0.001), function(x) qnorm(x, mean = 0, sd = 1)))
rnorm(5, 5)
rnorm(mena = 5, sd = 5)
rnorm(mean = 5, sd = 5)
rnorm(mean = 5, sd = 5, n = 100)
hist(data, prob = TRUE)
data <- rnorm(mean = 5, sd = 5, n = 100)
hist(data, prob = TRUE)
curve(dnorm(x, mean = 5, sd = 5), from = -20, to = 20)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25)
hist(data, prob = TRUE)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE)
hist(data, prob = TRUE)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "red", type = "b")
hist(data, prob = TRUE)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "red", type = "b")
hist(data, prob = TRUE)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "red", type = "b")
hist(data, prob = TRUE, breaks = 30)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "red", type = "b")
hist(data, prob = TRUE, breaks = 100)
hist(data, prob = TRUE, breaks = 80)
hist(data, prob = TRUE, breaks = 50)
hist(data, prob = TRUE, breaks = 50)
hist(data, prob = TRUE, breaks = 40)
hist(data, prob = TRUE, breaks = 30)
hist(data, prob = TRUE, breaks = 40)
hist(data, prob = TRUE, breaks = 30)
hist(data, prob = TRUE, breaks = 40)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "red", type = "b")
hist(data, prob = TRUE, breaks = 3)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "red", type = "b")
lines(density(data, col = "blue")
)
lines(density(data, col = "blue"))
hist(data, prob = TRUE, breaks = 3)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "red", type = "b")
lines(density(data))
hist(data, prob = TRUE, breaks = 30)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "red", type = "b")
lines(density(data))
pnorm(2 , mean = 0, sd = 1)
pnorm(2 , mean = 0, sd = 1) - pnorm(-2 , mean = 0, sd = 1)
unlist(lapply(list(0.01, 0.005, 0.001), function(x) qnorm(x, mean = 0, sd = 1)))
qnorm(0.01, mean = 0, sd = 1)
qnorm(0.01/2, mean = 0, sd = 1)
hist(data, prob = TRUE, breaks = 30)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "red", type = "b")
lines(density(data))
lines(density(data, bw = 10))
lines(density(data, bw = 5))
lines(density(data, bw = 3))
lines(density(data, bw = 2))
lines(density(data, bw = 1))
lines(density(data, bw = 0.5))
hist(data, prob = TRUE, breaks = 30)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "red", type = "b")
lines(density(data, bw = 0.5))
hist(data, prob = TRUE, breaks = 30)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "red", type = "b")
lines(density(data, bw = 0.001))
hist(data, prob = TRUE, breaks = 30)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "red", type = "b")
lines(density(data, bw = 0.000001))
hist(data, prob = TRUE, breaks = 30)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "red", type = "b")
lines(density(data, bw = 1))
hist(data, prob = TRUE, breaks = 30)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "red", type = "b")
lines(density(data, bw = 1))
lines(density(data))
lines(density(data, bw = 1.2))
lines(density(data, bw = 1.3))
lines(density(data, bw = 1.4))
?density
weibull <- function(beta)
{
1 - exp(-x ^ beta)
}
curve(weibull(beta), from = -Inf, to = +Inf)
curve(weibull(x), from = -Inf, to = +Inf)
curve(weibull(x), from = -100, to = +100)
curve(weibull(x, 2), from = -100, to = +100)
weibull <- function(x, beta)
{
1 - exp(-x ^ beta)
}
curve(weibull(x, 2), from = -100, to = +100)
curve(weibull(x, 5), from = -100, to = +100)
curve(weibull(x, 1), from = -100, to = +100)
curve(weibull(x, 0.1), from = -100, to = +100)
curve(weibull(x, 0.1), from = -100, to = +100)
curve(weibull(x, 2), from = -100, to = +100)
curve(weibull(x, 3), from = -100, to = +100)
weibull <- function(x, beta)
{
1 - exp(-x ^ beta)
}
lines(density(data))
hist(data, prob = TRUE, breaks = 30)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "red", type = "b")
lines(density(data))
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "red", type = "b")
plot(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "red", type = "b")
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "red", type = "b")
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "red", type = "b")
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "black", type = "b")
lines(density(data))
lines(density(data), col = "blue")
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "black", type = "b")
lines(density(data), col = "blue")
lines(density(data, bw = 2), "red")
lines(density(data, bw = 2), col = "red")
lines(density(data, bw = 10), col = "red")
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "black", type = "b")
lines(density(data), col = "blue")
lines(density(data, bw = 5), col = "red")
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "black", type = "b")
lines(density(data), col = "blue")
lines(density(data, bw = 5), col = "red")
hist(data, prob = TRUE, breaks = 30)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "black", type = "b")
lines(density(data), col = "blue")
lines(density(data, bw = 5), col = "red")
lines(density(data, bw = 3), col = "red")
hist(data, prob = TRUE, breaks = 30)
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "black", type = "b")
lines(density(data), col = "blue")
lines(density(data, bw = 3), col = "red")
lines(density(data, bw = 0.5), col = "brown")
hist(data, prob = TRUE, breaks = 30, main = "Different kernel bandwidths")
curve(dnorm(x, mean = 5, sd = 5), from = -15, to = 25, add = TRUE, col = "black", type = "b")
lines(density(data, bw = 0.5), col = "brown")
lines(density(data), col = "blue")
lines(density(data, bw = 3), col = "red")
lines(density(data, bw = 5), col = "green")
ecdf(data)
data
plot(ecdf(data))
pnorm(mean = 5, sd = 5)
plot(ecdf(data))
curve(pnorm(mean = 5, sd = 5), from = -10, to = 10, add = TRUE)
curve(pnorm(x, mean = 5, sd = 5), from = -10, to = 10, add = TRUE)
plot(ecdf(data))
curve(pnorm(x, mean = 5, sd = 5), from = -10, to = 10, add = TRUE)
curve(pnorm(x, mean = 5, sd = 5), from = -10, to = 30, add = TRUE)
plot(ecdf(data))
curve(pnorm(x, mean = 5, sd = 5), from = -10, to = 30, add = TRUE)
command <- paste("play ", base.filename, ".*", sep = "")
query
query <- "at bekræfte"
base.filename <- gsub(" ", "_", query)
base.filename
query <- "bekræfte"
base.filename <- gsub(" ", "_", query)
base.filename
query <- "herpå"
source("download_audio.R")
base.filename <- gsub(" ", "_", query)
base.filename
do.call("forvo.download", list(query, base.filename)) || do.call("ddo.download", list(query, base.filename)) || do.call("wiktionary.download", list(query, base.filename))
source("download_audio.R")
setwd("~/opt/udtale/")
source("download_audio.R")
do.call("forvo.download", list(query, base.filename)) || do.call("ddo.download", list(query, base.filename)) || do.call("wiktionary.download", list(query, base.filename))
forvo.url <- paste("https://apifree.forvo.com/key/9a2a10c6120731bc22aec3c8409d4235/format/xml/action/word-pronunciations/word",
query, "language/da", sep = "/")
forvo.url
ord.entry <- read_xml(forvo.url)
ord.entry
audio.url <- ((ord.entry %>% xml_children)[1] %>% xml_contents)[12] %>% xml_text
ord.entry
ord.entry
(ord.entry %>% xml_children)[1]
ord.entry %>% xml_children
ord.entry %>% xml_children
length(ord.entry %>% xml_children)
if(length(ord.entry %>% xml_children) == 0)
if(length(ord.entry %>% xml_children) == 0))
length(ord.entry %>% xml_children) == 0)
length(ord.entry %>% xml_children) == 0
do.call("forvo.download", list(query, base.filename)) || do.call("ddo.download", list(query, base.filename)) || do.call("wiktionary.download", list(query, base.filename))
source("download_audio.R")
do.call("forvo.download", list(query, base.filename)) || do.call("ddo.download", list(query, base.filename)) || do.call("wiktionary.download", list(query, base.filename))
do.call("forvo.download", list(query, base.filename))
do.call("ddo.download", list(query, base.filename))
do.call("forvo.download", list(query, base.filename))
x <- do.call("forvo.download", list(query, base.filename))
x
x || print("Hello")
0 || print("Hello")
T || print("Hello")
F || print("Hello")
do.call("forvo.download", list(query, base.filename)) | do.call("ddo.download", list(query, base.filename))# || do.call("wiktionary.download", list(query, base.filename))
do.call("forvo.download", list(query, base.filename)) || do.call("ddo.download", list(query, base.filename))# || do.call("wiktionary.download", list(query, base.filename))
`%||%` <- function(a, b) if (!is.null(a)) a else b
function_that_might_return_null() %||% default value
`%||%` <- function(a, b) if (!is.null(a)) a else b
source("download_audio.R")
do.call("forvo.download", list(query, base.filename)) || do.call("ddo.download", list(query, base.filename))# || do.call("wiktionary.download", list(query, base.filename))
